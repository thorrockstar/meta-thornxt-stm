--- a/arch/arm/dts/stm32mp157f-ev1.dts
+++ b/arch/arm/dts/stm32mp157f-ev1.dts
@@ -1,99 +1,797 @@
 // SPDX-License-Identifier: (GPL-2.0+ OR BSD-3-Clause)
 /*
- * Copyright (C) STMicroelectronics 2019 - All Rights Reserved
- * Author: Alexandre Torgue <alexandre.torgue@st.com> for STMicroelectronics.
+ * Copyright (C) THOR Engineering GmbH 2022
+ *
+ * Author: Roy Schneider <roy@thor.engineering> for THOR Engineering GmbH.
+ *
+ * Device Tree File for the THOR-E2 board for the u-boot.
  */
+ 
 /dts-v1/;
 
-#include "stm32mp157f-ed1.dts"
-#include "stm32mp15xx-evx.dtsi"
+#include "stm32mp151.dtsi"               /* dt-bindings/#? */
+#include "stm32mp15xf.dtsi"              /* stm32mp15xd.dtsi */
+#include "stm32mp15-pinctrl.dtsi"        /* Analogue, Ethernet, etc. */
+#include "stm32mp15xxaa-pinctrl.dtsi"    /* GPIOA..Z */
+#include "stm32mp15-m4-srm.dtsi"         /* M4 CPU, USART, timers, etc. */
+#include "stm32mp15-m4-srm-pinctrl.dtsi" /* M4 CPU pinout */
+
+#include <dt-bindings/gpio/gpio.h>
+#include <dt-bindings/mfd/st,stpmic1.h>
+#include <dt-bindings/soc/stm32-hdp.h>
+
+/* Board description */
 
 / {
-	model = "STMicroelectronics STM32MP157F eval daughter on eval mother";
-	compatible = "st,stm32mp157f-ev1", "st,stm32mp157f-ed1", "st,stm32mp157";
+	model = "THOR Engineering E2-Board";
+	compatible = "st,stm32mp157f-ev1", "st,stm32mp157f-thor-e2", "st,stm32mp157";
+
+	aliases {
+		ethernet0 = &ethernet0;
+		serial0 = &uart4;
+		spi5 = &spi5;
+		usb0 = &usbotg_hs;
+	};
+
+	/* Standard serial console output. */
 
 	chosen {
 		#address-cells = <1>;
 		#size-cells = <1>;
 		ranges;
 		stdout-path = "serial0:115200n8";
+	};
 
-		framebuffer {
-			compatible = "simple-framebuffer";
-			clocks = <&rcc LTDC_PX>;
+	cpus {
+		cpu1: cpu@1 {
+			compatible = "arm,cortex-a7";
+			device_type = "cpu";
+			reg = <1>;
+			clocks = <&scmi_clk CK_SCMI_MPU>;
+			clock-names = "cpu";
+			operating-points-v2 = <&cpu0_opp_table>;
+		};
+	};
+
+	arm-pmu {
+		interrupts = <GIC_SPI 200 IRQ_TYPE_LEVEL_HIGH>,
+			     <GIC_SPI 201 IRQ_TYPE_LEVEL_HIGH>;
+		interrupt-affinity = <&cpu0>, <&cpu1>;
+	};
+
+	soc {
+		m_can1: can@4400e000 {
+			compatible = "bosch,m_can";
+			reg = <0x4400e000 0x400>, <0x44011000 0x1400>;
+			reg-names = "m_can", "message_ram";
+			interrupts = <GIC_SPI 19 IRQ_TYPE_LEVEL_HIGH>,
+				     <GIC_SPI 21 IRQ_TYPE_LEVEL_HIGH>;
+			interrupt-names = "int0", "int1";
+			clocks = <&scmi_clk CK_SCMI_HSE>, <&rcc FDCAN_K>;
+			clock-names = "hclk", "cclk";
+			bosch,mram-cfg = <0x0 0 0 32 0 0 2 2>;
 			status = "disabled";
 		};
+
+		m_can2: can@4400f000 {
+			compatible = "bosch,m_can";
+			reg = <0x4400f000 0x400>, <0x44011000 0x2800>;
+			reg-names = "m_can", "message_ram";
+			interrupts = <GIC_SPI 20 IRQ_TYPE_LEVEL_HIGH>,
+				     <GIC_SPI 22 IRQ_TYPE_LEVEL_HIGH>;
+			interrupt-names = "int0", "int1";
+			clocks = <&scmi_clk CK_SCMI_HSE>, <&rcc FDCAN_K>;
+			clock-names = "hclk", "cclk";
+			bosch,mram-cfg = <0x1400 0 0 32 0 0 2 2>;
+			status = "disabled";
+		};
+	};
+
+	/* RAM base address and size */
+
+	memory@c0000000 {
+		device_type = "memory";
+		reg = <0xc0000000 0x20000000>;
 	};
 
-	panel_backlight: panel-backlight {
+	/* Memory reserved for peripherals and IO. */
+
+	reserved-memory {
+		#address-cells = <1>;
+		#size-cells = <1>;
+		ranges;
+
+		mcuram2: mcuram2@10000000 {
+			compatible = "shared-dma-pool";
+			reg = <0x10000000 0x40000>;
+			no-map;
+		};
+
+		vdev0vring0: vdev0vring0@10040000 {
+			compatible = "shared-dma-pool";
+			reg = <0x10040000 0x1000>;
+			no-map;
+		};
+
+		vdev0vring1: vdev0vring1@10041000 {
+			compatible = "shared-dma-pool";
+			reg = <0x10041000 0x1000>;
+			no-map;
+		};
+
+		vdev0buffer: vdev0buffer@10042000 {
+			compatible = "shared-dma-pool";
+			reg = <0x10042000 0x4000>;
+			no-map;
+		};
+
+		mcu_rsc_table: mcu_rsc_table@10048000 {
+			compatible = "shared-dma-pool";
+			reg = <0x10048000 0x8000>;
+			no-map;
+		};
+
+		mcuram: mcuram@30000000 {
+			compatible = "shared-dma-pool";
+			reg = <0x30000000 0x40000>;
+			no-map;
+		};
+
+		retram: retram@38000000 {
+			compatible = "shared-dma-pool";
+			reg = <0x38000000 0x10000>;
+			no-map;
+		};
+
+		gpu_reserved: gpu@f6000000 {
+			reg = <0xf6000000 0x8000000>;
+			no-map;
+		};
+	};
+
+	/* Simple display panel */
+
+	backlight: backlight {
 		compatible = "gpio-backlight";
-		gpios = <&gpiod 13 GPIO_ACTIVE_LOW>;
+		/*Use an unused CPU pin here, so that we can control the real background light manually.*/
+		gpios = <&gpioh 8 GPIO_ACTIVE_HIGH>;
 		default-on;
 		status = "okay";
 	};
+
+	panel-rgb@0 {
+		compatible = "simple-panel";
+		backlight = <&backlight>;
+		/*enable-gpios = <&gpioe 13 0>;*/
+		status = "okay";
+
+		display-timings {
+			timing@0 {
+				clock-frequency = <33011000>;
+				hactive = <480>;
+				vactive = <960>;
+				hfront-porch = <30>;
+				hback-porch = <30>;
+				hsync-len = <8>;
+				vfront-porch = <20>;
+				vback-porch = <20>;
+				vsync-len = <4>;
+				hsync-active = <0>;
+				vsync-active = <0>;
+				de-active = <1>;
+				pixelclk-active = <1>;
+			};
+		};
+	};
+
+	/* Optional USB-PHY parameters. */
+
+	usb_phy_tuning: usb-phy-tuning {
+		st,hs-dc-level = <2>;
+		st,fs-rftime-tuning;
+		st,hs-rftime-reduction;
+		st,hs-current-trim = <15>;
+		st,hs-impedance-trim = <1>;
+		st,squelch-level = <3>;
+		st,hs-rx-offset = <2>;
+		st,no-lsfs-sc;
+	};
+
+	/* Input voltage definition. */
+
+	vin: vin {
+		compatible = "regulator-fixed";
+		regulator-name = "vin";
+		regulator-min-microvolt = <5000000>;
+		regulator-max-microvolt = <5000000>;
+		regulator-always-on;
+	};
 };
 
-&dsi {
-	#address-cells = <1>;
-	#size-cells = <0>;
-	status = "okay";
+/* Pinout mapping */
 
-	ports {
-		#address-cells = <1>;
-		#size-cells = <0>;
+&pinctrl {
+	u-boot,dm-pre-reloc;
 
-		port@0 {
-			reg = <0>;
-			dsi_in: endpoint {
-				remote-endpoint = <&ltdc_ep0_out>;
-			};
+	/* Pins for the CAN1 interface. */
+	
+	m_can1_pins_z: m-can1-0 {
+		pins1 {
+			pinmux = <STM32_PINMUX('B', 9, AF9)>; /* CAN1_TX */
+			slew-rate = <0>;
+			drive-push-pull;
+			bias-disable;
 		};
+		pins2 {
+			pinmux = <STM32_PINMUX('H', 14, AF9)>; /* CAN1_RX */
+			bias-disable;
+		};
+	};
 
-		port@1 {
-			reg = <1>;
-			dsi_out: endpoint {
-				remote-endpoint = <&dsi_panel_in>;
-			};
+	/* Pins for the CAN2 interface. */
+	
+	m_can2_pins_z: m-can2-0 {
+		pins1 {
+			pinmux = <STM32_PINMUX('B', 6, AF9)>; /* CAN2_TX */
+			slew-rate = <0>;
+			drive-push-pull;
+			bias-disable;
+		};
+		pins2 {
+			pinmux = <STM32_PINMUX('B', 5, AF9)>; /* CAN2_RX */
+			bias-disable;
 		};
 	};
 
-	panel_dsi: panel-dsi@0 {
-		compatible = "raydium,rm68200";
-		reg = <0>;
-		reset-gpios = <&gpiof 15 GPIO_ACTIVE_LOW>;
-		backlight = <&panel_backlight>;
-		power-supply = <&v3v3>;
-		status = "okay";
+	/* Pins for the Debug interface. */
 
-		port {
-			dsi_panel_in: endpoint {
-				remote-endpoint = <&dsi_out>;
-			};
+	uart4_pins_mx_z: uart4-0 {
+		pins1 {
+			pinmux = <STM32_PINMUX('C', 8, AF6)>; /* UART4_TX */
+			bias-disable;
+			drive-push-pull;
+			slew-rate = <0>;
+		};
+		pins2 {
+			pinmux = <STM32_PINMUX('C', 11, AF8)>; /* UART4_RX */
+			bias-disable;
+		};
+	};
+
+	/* Pins for the SPI used to communicate with the display controller. */
+
+	spi5_pins_mx_z: spi5-0 {
+		pins1 {
+			pinmux = <STM32_PINMUX('H', 6, AF5)>, /* SPI5_SCK */
+				 <STM32_PINMUX('F', 9, AF5)>;  /* SPI5_MOSI */
+			bias-disable;
+			drive-push-pull;
+			slew-rate = <1>;
+		};
+		
+		pins2 {
+			pinmux = <STM32_PINMUX('H', 7, AF5)>; /* SPI5_MISO */
+			bias-disable;
+		};
+	};
+
+	spi5_sleep_pins_mx_z: spi5-sleep-0 {
+		pins {
+			pinmux = <STM32_PINMUX('F', 9, ANALOG)>,  /* SPI5_MOSI */
+				  <STM32_PINMUX('H', 7, ANALOG)>; /* SPI5_MISO */
+		};
+	};
+
+	/* Pins for the parallel driven display. */
+
+	ltdc_pins_mx_z: ltdc_mx-0 {
+		pins1 {
+			pinmux = <STM32_PINMUX('A', 9, AF14)>, /* LTDC_R5 */
+					 <STM32_PINMUX('A', 10, AF14)>, /* LTDC_B1 */
+					 <STM32_PINMUX('C', 6, AF14)>, /* LTDC_HSYNC */
+					 <STM32_PINMUX('C', 7, AF14)>, /* LTDC_G6 */
+					 <STM32_PINMUX('C', 9, AF14)>, /* LTDC_B2 */
+					 <STM32_PINMUX('C', 10, AF14)>, /* LTDC_R2 */
+					 <STM32_PINMUX('D', 3, AF14)>, /* LTDC_G7 */
+					 <STM32_PINMUX('D', 10, AF14)>, /* LTDC_B3 */
+					 <STM32_PINMUX('E', 4, AF14)>, /* LTDC_B0 */
+					 <STM32_PINMUX('E', 5, AF14)>, /* LTDC_G0 */
+					 <STM32_PINMUX('E', 6, AF14)>, /* LTDC_G1 */
+					 <STM32_PINMUX('E', 11, AF14)>, /* LTDC_G3 */
+					 <STM32_PINMUX('E', 12, AF14)>, /* LTDC_B4 */
+					 <STM32_PINMUX('E', 13, AF14)>, /* LTDC_DE */
+					 <STM32_PINMUX('E', 15, AF14)>, /* LTDC_R7 */
+					 <STM32_PINMUX('H', 2, AF14)>, /* LTDC_R0 */
+					 <STM32_PINMUX('H', 3, AF14)>, /* LTDC_R1 */
+					 <STM32_PINMUX('H', 4, AF9)>, /* LTDC_G5 */
+					 <STM32_PINMUX('H', 9, AF14)>, /* LTDC_R3 */
+					 <STM32_PINMUX('H', 10, AF14)>, /* LTDC_R4 */
+					 <STM32_PINMUX('H', 12, AF14)>, /* LTDC_R6 */
+					 <STM32_PINMUX('H', 13, AF14)>, /* LTDC_G2 */
+					 <STM32_PINMUX('H', 15, AF14)>, /* LTDC_G4 */
+					 <STM32_PINMUX('I', 5, AF14)>, /* LTDC_B5 */
+					 <STM32_PINMUX('B', 8, AF14)>, /* LTDC_B6 */
+					 <STM32_PINMUX('D', 8, AF14)>, /* LTDC_B7 */
+					 <STM32_PINMUX('I', 9, AF14)>; /* LTDC_VSYNC */
+			bias-disable;
+			drive-push-pull;
+			slew-rate = <0>;
+		};
+		pins2 {
+			pinmux = <STM32_PINMUX('E', 14, AF14)>; /* LTDC_CLK */
+			bias-disable;
+			drive-push-pull;
+			slew-rate = <1>;
+		};
+	};
+
+	/* Pins for the Ethernet interface */
+	
+	eth1_pins_mx_z: rmii-0 {
+		pins1 {
+			pinmux = <STM32_PINMUX('G', 13, AF11)>, /* ETH1_RMII_TXD0 */
+				 <STM32_PINMUX('G', 14, AF11)>, /* ETH1_RMII_TXD1 */
+				 <STM32_PINMUX('G', 11, AF11)>, /* ETH1_RMII_TX_EN */
+				 <STM32_PINMUX('A', 1, AF11)>,  /* ETH1_RMII_REF_CLK */
+				 <STM32_PINMUX('A', 2, AF11)>,  /* ETH1_MDIO */
+				 <STM32_PINMUX('C', 1, AF11)>;  /* ETH1_MDC */
+			bias-disable;
+			drive-push-pull;
+			slew-rate = <2>;
+		};
+		pins2 {
+			pinmux = <STM32_PINMUX('C', 4, AF11)>,  /* ETH1_RMII_RXD0 */
+				 <STM32_PINMUX('C', 5, AF11)>,  /* ETH1_RMII_RXD1 */
+				 <STM32_PINMUX('A', 7, AF11)>,  /* ETH1_RMII_CRS_DV */
+				 <STM32_PINMUX('G', 12, AF11)>; /* ETH1_PHY_INTN */
+			bias-disable;
+		};
+	};
+
+	/* Pinout for the NAND Flash. */
+
+	fmc_pins_mx: fmc-0 {
+		pins1 {
+			pinmux = <STM32_PINMUX('D', 0, AF12)>, /* FMC_D2 */
+				 <STM32_PINMUX('D', 1, AF12)>, /* FMC_D3 */
+				 <STM32_PINMUX('D', 4, AF12)>, /* FMC_NOE */
+				 <STM32_PINMUX('D', 5, AF12)>, /* FMC_NWE */
+				 <STM32_PINMUX('D', 11, AF12)>, /* FMC_CLE */
+				 <STM32_PINMUX('D', 12, AF12)>, /* FMC_ALE */
+				 <STM32_PINMUX('D', 14, AF12)>, /* FMC_D0 */
+				 <STM32_PINMUX('D', 15, AF12)>, /* FMC_D1 */
+				 <STM32_PINMUX('E', 7, AF12)>, /* FMC_D4 */
+				 <STM32_PINMUX('E', 8, AF12)>, /* FMC_D5 */
+				 <STM32_PINMUX('E', 9, AF12)>, /* FMC_D6 */
+				 <STM32_PINMUX('E', 10, AF12)>, /* FMC_D7 */
+				 <STM32_PINMUX('G', 9, AF12)>; /* FMC_NCE */
+			bias-disable;
+			drive-push-pull;
+			slew-rate = <1>;
+		};
+		pins2 {
+			pinmux = <STM32_PINMUX('D', 6, AF12)>; /* FMC_NWAIT */
+			bias-pull-up;
+		};
+	};
+	
+	fmc_sleep_pins_mx: fmc-sleep-0 {
+		pins {
+			pinmux = <STM32_PINMUX('D', 0, ANALOG)>, /* FMC_D2 */
+				 <STM32_PINMUX('D', 1, ANALOG)>, /* FMC_D3 */
+				 <STM32_PINMUX('D', 4, ANALOG)>, /* FMC_NOE */
+				 <STM32_PINMUX('D', 5, ANALOG)>, /* FMC_NWE */
+				 <STM32_PINMUX('D', 11, ANALOG)>, /* FMC_CLE */
+				 <STM32_PINMUX('D', 12, ANALOG)>, /* FMC_ALE */
+				 <STM32_PINMUX('D', 14, ANALOG)>, /* FMC_D0 */
+				 <STM32_PINMUX('D', 15, ANALOG)>, /* FMC_D1 */
+				 <STM32_PINMUX('E', 7, ANALOG)>, /* FMC_D4 */
+				 <STM32_PINMUX('E', 8, ANALOG)>, /* FMC_D5 */
+				 <STM32_PINMUX('E', 9, ANALOG)>, /* FMC_D6 */
+				 <STM32_PINMUX('E', 10, ANALOG)>, /* FMC_D7 */
+				 <STM32_PINMUX('G', 9, ANALOG)>; /* FMC_NCE */
 		};
 	};
 };
 
-&i2c2 {
-	gt9147: goodix_ts@5d {
-		compatible = "goodix,gt9147";
-		reg = <0x5d>;
-		panel = <&panel_dsi>;
-		pinctrl-0 = <&goodix_pins>;
-		pinctrl-names = "default";
-		status = "okay";
+&pinctrl_z {
+	u-boot,dm-pre-reloc;
+};
+
+/* Activate build-in crypto engine. */
+
+&cryp1 {
+	status = "okay";
+};
+
+/* Activate the build-in RTC. */
+
+&rtc {
+	status = "okay";
+};
+
+/* SPI for display initialization */
+
+&spi5 {
+	u-boot,dm-spl;
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <&spi5_pins_mx_z>;
+	pinctrl-1 = <&spi5_sleep_pins_mx_z>;
+	/* Chip select for the display SPI interface. */
+	cs-gpios = <&gpioc 0 0>;
+	status = "okay";
+};
+
+&tamp {
+	status = "okay";
+};
+
+/* CPU voltage supply */
+
+&cpu0{
+	cpu-supply = <&vddcore>;
+};
+
+&cpu1{
+	cpu-supply = <&vddcore>;
+};
+
+/* Hardware CRC unit. */
+
+&crc1 {
+	status = "okay";
+};
+
+/* DMA */
+
+&dma1 {
+	sram = <&dma_pool>;
+	status = "okay";
+};
 
-		interrupts = <14 IRQ_TYPE_EDGE_RISING>;
-		interrupt-parent = <&stmfx_pinctrl>;
+&dma2 {
+	sram = <&dma_pool>;
+	status = "okay";
+};
+
+&dmamux1{
+	dma-masters = <&dma1 &dma2>;
+	dma-channels = <16>;
+	status = "okay";
+};
+
+/* Device temperature monitoring. */
+
+&dts {
+	status = "okay";
+};
+
+/* Internal SRAM. */
+
+&sram {
+	dma_pool: dma_pool@0 {
+		reg = <0x50000 0x10000>;
+		pool;
 	};
 };
 
+/* Flexible Memory controller. */
+
+&fmc {
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <&fmc_pins_mx>;
+	pinctrl-1 = <&fmc_sleep_pins_mx>;
+	status = "okay";
+
+	nand-controller@4,0 {
+		status = "okay"; 
+
+		nand: nand@0 {
+			reg = <0>;			/* Describe the CS line assigned to the NAND chip. */
+			nand-on-flash-bbt;		/* Store the bad block table on NAND Flash memory. */
+			nand-ecc-strength = <4>;	/* Number of bits to correct per ECC step (BCH4). */
+			nand-ecc-step-size = <512>;	/* Number of data bytes that are covered by a single ECC step. */
+			#address-cells = <1>;
+			#size-cells = <1>;
+           };
+       };
+};
+
+/* CAN1 and CAN2 */
+
+&m_can1 {
+ 	pinctrl-names = "default";                  /* configure pinctrl modes for m_can1 */
+ 	pinctrl-0 = <&m_can1_pins_z>;               /* configure m_can1_pins_a as default pinctrl configuration for m_can1 */
+ 	status = "okay";                            /* enable m_can1 */ 
+};
+
+&m_can2 {
+ 	pinctrl-names = "default";                  /* configure pinctrl modes for m_can2 */
+ 	pinctrl-0 = <&m_can2_pins_z>;               /* configure m_can2_pins_a as default pinctrl configuration for m_can2 */
+ 	status = "okay";                            /* enable m_can2 */ 
+};
+
+/* Display controller */
+
 &ltdc {
+	pinctrl-names = "default";
+	pinctrl-0 = <&ltdc_pins_mx_z>;
 	status = "okay";
+};
+
+/* Ethernet interface (10/100). */
+
+&ethernet0 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&eth1_pins_mx_z>;
+	status = "okay";
+	phy-mode = "rmii";
+	max-speed = <100>;
+	phy-handle = <&phy0>;
+	/*nvmem-cells = <&ethernet_mac_address>;*/
+	/*nvmem-cell-names = "mac-address";*/
+
+	mdio0 {
+		#address-cells = <1>;
+		#size-cells = <0>;
+		compatible = "snps,dwmac-mdio";
+		phy0: ethernet-phy@1 {
+			reg = <1>;
+		};
+	};
+};
+
+/* Enable hardware hash unit. */
+
+&hash1 {
+	status = "okay";
+};
+
+/* I2C for communication with the PMIC (power controller). */
+
+&i2c4 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&i2c4_pins_a>;
+	i2c-scl-rising-time-ns = <185>;
+	i2c-scl-falling-time-ns = <20>;
+	clock-frequency = <400000>;
+	status = "okay";
+	/* spare dmas for other usage */
+	/delete-property/dmas;
+	/delete-property/dma-names;
+
+	pmic: stpmic@33 {
+		compatible = "st,stpmic1";
+		reg = <0x33>;
+		interrupts-extended = <&exti 55 IRQ_TYPE_EDGE_FALLING>;
+		interrupt-controller;
+		#interrupt-cells = <2>;
+		status = "okay";
+
+		regulators {
+			compatible = "st,stpmic1-regulators";
+			buck1-supply = <&vin>;
+			buck2-supply = <&vin>;
+			buck3-supply = <&vin>;
+			buck4-supply = <&vin>;
+			ldo1-supply = <&vin>;
+			ldo2-supply = <&vin>;
+			ldo3-supply = <&vdd_ddr>;
+			ldo4-supply = <&vin>;
+			ldo5-supply = <&vin>;
+			ldo6-supply = <&vin>;
+			vref_ddr-supply = <&vin>;
+			boost-supply = <&vin>;
+			pwr_sw1-supply = <&bst_out>;
+			pwr_sw2-supply = <&bst_out>;
+
+			vddcore: buck1 {
+				regulator-name = "vddcore";
+				regulator-min-microvolt = <1200000>;
+				regulator-max-microvolt = <1350000>;
+				regulator-always-on;
+				regulator-initial-mode = <0>;
+				regulator-over-current-protection;
+			};
+
+			vdd_ddr: buck2 {
+				regulator-name = "vdd_ddr";
+				regulator-min-microvolt = <1350000>;
+				regulator-max-microvolt = <1350000>;
+				regulator-always-on;
+				regulator-initial-mode = <0>;
+				regulator-over-current-protection;
+			};
+
+			vdd: buck3 {
+				regulator-name = "vdd";
+				regulator-min-microvolt = <3300000>;
+				regulator-max-microvolt = <3300000>;
+				regulator-always-on;
+				st,mask-reset;
+				regulator-initial-mode = <0>;
+				regulator-over-current-protection;
+			};
+
+			v3v3: buck4 {
+				regulator-name = "v3v3";
+				regulator-min-microvolt = <3300000>;
+				regulator-max-microvolt = <3300000>;
+				regulator-always-on;
+				regulator-over-current-protection;
+				regulator-initial-mode = <0>;
+			};
+
+			vdd_sd: ldo1 {
+				regulator-name = "vdd_sd";
+				regulator-min-microvolt = <3300000>;
+				regulator-max-microvolt = <3300000>;
+				regulator-always-on;
+			};
+
+			v3v3_unused: ldo2 {
+				regulator-name = "v3v3_unused";
+				regulator-min-microvolt = <3300000>;
+				regulator-max-microvolt = <3300000>;
+				regulator-always-on;
+			};
+
+			vtt_ddr: ldo3 {
+				regulator-name = "vtt_ddr";
+				regulator-always-on;
+				regulator-over-current-protection;
+			};
+
+			vdd_usb: ldo4 {
+				regulator-name = "vdd_usb";
+				regulator-min-microvolt = <3300000>;
+				regulator-max-microvolt = <3300000>;
+			};
+
+			vdda: ldo5 {
+				regulator-name = "vdda";
+				regulator-min-microvolt = <2900000>;
+				regulator-max-microvolt = <2900000>;
+				regulator-boot-on;
+			};
+
+			v1v2_unused: ldo6 {
+				regulator-name = "v1v2_unused";
+				regulator-min-microvolt = <1200000>;
+				regulator-max-microvolt = <1200000>;
+				regulator-always-on;
+			};
+
+			vref_ddr: vref_ddr {
+				regulator-name = "vref_ddr";
+				regulator-always-on;
+			};
+
+			bst_out: boost {
+				regulator-name = "bst_out";
+			};
 
-	port {
-		ltdc_ep0_out: endpoint@0 {
-			reg = <0>;
-			remote-endpoint = <&dsi_in>;
+			vbus_otg: pwr_sw1 {
+				regulator-name = "vbus_otg";
+			};
+
+			vbus_sw: pwr_sw2 {
+				regulator-name = "vbus_sw";
+				regulator-active-discharge = <1>;
+			};
+		};
+
+		watchdog {
+			compatible = "st,stpmic1-wdt";
+			status = "disabled";
 		};
 	};
 };
+
+/* The inter-processor communication controller (IPCC) is used to exchange data between two processors. */
+
+&ipcc {
+	status = "okay";
+};
+
+/* Watchdog */
+
+&iwdg2 {
+	timeout-sec = <32>;
+	status = "okay";
+};
+
+/* Cortex M4 coprocessor. */
+
+&m4_rproc {
+	memory-region = <&retram>, <&mcuram>, <&mcuram2>, <&vdev0vring0>,
+			<&vdev0vring1>, <&vdev0buffer>, <&mcu_rsc_table>;
+	mboxes = <&ipcc 0>, <&ipcc 1>, <&ipcc 2>;
+	mbox-names = "vq0", "vq1", "shutdown";
+	interrupt-parent = <&exti>;
+	interrupts = <68 1>;
+	wakeup-source;
+	status = "okay";
+};
+
+/* Power regulators */
+
+&pwr_regulators {
+	vdd-supply = <&vdd>;
+	vdd_3v3_usbfs-supply = <&vdd_usb>;
+};
+
+/* Hardware random numbers generator. */
+
+&rng1 {
+	status = "okay";
+};
+
+/* Reference voltage for the analogue inputs. */
+
+&vrefbuf {
+	regulator-min-microvolt = <2500000>;
+	regulator-max-microvolt = <2500000>;
+	vdda-supply = <&vdd>;
+	status = "okay";
+};
+
+/* UART for Debug */
+
+&uart4 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&uart4_pins_mx_z>;
+	/delete-property/dmas;
+	/delete-property/dma-names;
+	status = "okay";
+};
+
+/* This peripheral is a USB Host controller supporting high-speed (480 Mbit/s) using an EHCI controller, and full- and low- speeds through OHCI controller. */
+
+&usbh_ehci {
+	phys = <&usbphyc_port0>;
+	phy-names = "usb";
+	status = "okay";
+};
+
+/* This peripheral is a USB OTG high-speed controller being fixed to 'peripheral' mode, supporting Flash programming with STM32CubeProgrammer. */
+
+&usbotg_hs {
+	u-boot,force-b-session-valid;
+	compatible = "st,stm32mp15-hsotg", "snps,dwc2";
+	phys = <&usbphyc_port1 0>;	/* 0: UTMI switch selects the OTG controller */
+	phy-names = "usb2-phy";
+	dr_mode = "peripheral";
+	usb-role-switch;
+	role-switch-default-mode = "peripheral";
+	status = "okay";
+};
+
+/* This peripheral is a block that contains a dual port USB high-speed UTMI+ PHY and a UTMI switch. */
+
+&usbphyc {
+	status = "okay";
+};
+
+/* Child nodes for each USB port. */
+
+&usbphyc_port0 {
+	phy-supply = <&vdd_usb>;
+	st,phy-tuning = <&usb_phy_tuning>;
+
+	/*
+	 * Hack to keep hub active until all connected devices are suspended
+	 * otherwise the hub will be powered off as soon as the v3v3 is disabled
+	 * and it can disturb connected devices.
+	 */
+	connector {
+		compatible = "usb-a-connector";
+		vbus-supply = <&v3v3>;
+	};
+};
+
+&usbphyc_port1 {
+	phy-supply = <&vdd_usb>;
+	st,phy-tuning = <&usb_phy_tuning>;
+};
+
